==7685== Memcheck, a memory error detector
==7685== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7685== Using Valgrind-3.14.0-353a3587bb-20181007X and LibVEX; rerun with -h for copyright info
==7685== Command: Lex infile3.txt outfile3.txt
==7685== 
--7685-- Valgrind options:
--7685--    --leak-check=full
--7685--    -v
--7685-- Contents of /proc/version:
--7685--   Linux version 3.10.0-1062.4.3.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Wed Nov 13 23:58:53 UTC 2019
--7685-- 
--7685-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-avx
--7685-- Page sizes: currently 4096, max supported 4096
--7685-- Valgrind library directory: /opt/rh/devtoolset-8/root/usr/lib64/valgrind
--7685-- Reading syms from /afs/cats.ucsc.edu/users/x/radgupta/cse101/pa1/Lex
--7685-- Reading syms from /usr/lib64/ld-2.17.so
--7685--   Considering /usr/lib/debug/.build-id/5c/c1a53b747a7e4d21198723c2b633e54f3c06d9.debug ..
--7685--   .. build-id is valid
--7685-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/memcheck-amd64-linux
--7685--    object doesn't have a symbol table
--7685--    object doesn't have a dynamic symbol table
--7685-- Scheduler: using generic scheduler lock implementation.
--7685-- Reading suppressions file: /opt/rh/devtoolset-8/root/usr/lib64/valgrind/default.supp
==7685== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-7685-by-radgupta-on-unix3.lt.ucsc.edu
==7685== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-7685-by-radgupta-on-unix3.lt.ucsc.edu
==7685== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-7685-by-radgupta-on-unix3.lt.ucsc.edu
==7685== 
==7685== TO CONTROL THIS PROCESS USING vgdb (which you probably
==7685== don't want to do, unless you know exactly what you're doing,
==7685== or are doing some strange experiment):
==7685==   /opt/rh/devtoolset-8/root/usr/lib64/valgrind/../../bin/vgdb --pid=7685 ...command...
==7685== 
==7685== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==7685==   /path/to/gdb Lex
==7685== and then give GDB the following command
==7685==   target remote | /opt/rh/devtoolset-8/root/usr/lib64/valgrind/../../bin/vgdb --pid=7685
==7685== --pid is optional if only one valgrind process is running
==7685== 
--7685-- REDIR: 0x4019df0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c66c5 (???)
--7685-- REDIR: 0x4019bc0 (ld-linux-x86-64.so.2:index) redirected to 0x580c66df (???)
--7685-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--7685-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
==7685== WARNING: new redirection conflicts with existing -- ignoring it
--7685--     old: 0x04019df0 (strlen              ) R-> (0000.0) 0x580c66c5 ???
--7685--     new: 0x04019df0 (strlen              ) R-> (2007.0) 0x04c2d0a0 strlen
--7685-- REDIR: 0x4019d70 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c2e1f0 (strcmp)
--7685-- REDIR: 0x401aa30 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c31da0 (mempcpy)
--7685-- Reading syms from /usr/lib64/libc-2.17.so
--7685--   Considering /usr/lib/debug/.build-id/39/8944d32cf16a67af51067a326e6c0cc14f90ed.debug ..
--7685--   .. build-id is valid
--7685-- REDIR: 0x4ec70e0 (libc.so.6:strcasecmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ec3e60 (libc.so.6:strnlen) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ec93b0 (libc.so.6:strncasecmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ec68c0 (libc.so.6:memset) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ec6870 (libc.so.6:memcpy@GLIBC_2.2.5) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ec5850 (libc.so.6:__GI_strrchr) redirected to 0x4c2ca60 (__GI_strrchr)
--7685-- REDIR: 0x4ebca90 (libc.so.6:malloc) redirected to 0x4c29ddc (malloc)
--7685-- REDIR: 0x4edc8d0 (libc.so.6:__GI_strstr) redirected to 0x4c32030 (__strstr_sse2)
--7685-- REDIR: 0x4ec5f50 (libc.so.6:memchr) redirected to 0x4c2e290 (memchr)
--7685-- REDIR: 0x4ecbaf0 (libc.so.6:__GI_memcpy) redirected to 0x4c2eea0 (__GI_memcpy)
--7685-- REDIR: 0x4ebd4b0 (libc.so.6:calloc) redirected to 0x4c2bee3 (calloc)
--7685-- REDIR: 0x4ec3770 (libc.so.6:strcpy) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4ed1690 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4c2d0c0 (strcpy)
--7685-- REDIR: 0x4ecd370 (libc.so.6:strchrnul) redirected to 0x4c318c0 (strchrnul)
--7685-- REDIR: 0x4ebceb0 (libc.so.6:free) redirected to 0x4c2aed6 (free)
--7685-- REDIR: 0x4ec6a90 (libc.so.6:__GI_mempcpy) redirected to 0x4c31ad0 (__GI_mempcpy)
--7685-- REDIR: 0x4ec22e0 (libc.so.6:strcmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--7685-- REDIR: 0x4f75d40 (libc.so.6:__strcmp_sse42) redirected to 0x4c2e1a0 (__strcmp_sse42)
====
sometimes tokens
may appear in tests
so you better
write your program
in accordance with
the instructions set
out in the PDF
=====
seriously all you
have to do is treat
every line as a single string
===
ababababababababababababab==7685== 
==7685== HEAP SUMMARY:
==7685==     in use at exit: 1,664 bytes in 13 blocks
==7685==   total heap usage: 110 allocs, 97 frees, 5,168 bytes allocated
==7685== 
==7685== Searching for pointers to 13 not-freed blocks
==7685== Checked 70,544 bytes
==7685== 
==7685== 1,664 bytes in 13 blocks are definitely lost in loss record 1 of 1
==7685==    at 0x4C29E63: malloc (vg_replace_malloc.c:309)
==7685==    by 0x400A78: main (in /afs/cats.ucsc.edu/users/x/radgupta/cse101/pa1/Lex)
==7685== 
==7685== LEAK SUMMARY:
==7685==    definitely lost: 1,664 bytes in 13 blocks
==7685==    indirectly lost: 0 bytes in 0 blocks
==7685==      possibly lost: 0 bytes in 0 blocks
==7685==    still reachable: 0 bytes in 0 blocks
==7685==         suppressed: 0 bytes in 0 blocks
==7685== 
==7685== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==7685== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
